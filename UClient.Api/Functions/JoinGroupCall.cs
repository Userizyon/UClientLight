using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace UClient
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class UApi
    {
        /// <summary>
        /// Joins a group call
        /// </summary>
        public class JoinGroupCall : Function<GroupCallJoinResponse>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "joinGroupCall";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }
            
/// <summary>
/// Group call identifier
/// </summary>
[JsonConverter(typeof(Converter))]
[JsonProperty("group_call_id")]
public int GroupCallId { get; set; }

/// <summary>
/// Identifier of the group call participant, which will be used to join the call; voice chats only
/// </summary>
[JsonConverter(typeof(Converter))]
[JsonProperty("participant_alias")]
public MessageSender ParticipantAlias { get; set; }

/// <summary>
/// Group join payload; received from tgcalls
/// </summary>
[JsonConverter(typeof(Converter))]
[JsonProperty("payload")]
public GroupCallPayload Payload { get; set; }

/// <summary>
/// Caller synchronization source identifier; received from tgcalls
/// </summary>
[JsonConverter(typeof(Converter))]
[JsonProperty("source")]
public int Source { get; set; }

/// <summary>
/// True, if the user's microphone is muted
/// </summary>
[JsonConverter(typeof(Converter))]
[JsonProperty("is_muted")]
public bool IsMuted { get; set; }

/// <summary>
/// If non-empty, invite hash to be used to join the group call without being muted by administrators
/// </summary>
[JsonConverter(typeof(Converter))]
[JsonProperty("invite_hash")]
public string InviteHash { get; set; }


        }

        /// <summary>
        /// Joins a group call
        /// </summary>
        public static Task<GroupCallJoinResponse> JoinGroupCallAsync(
            this Client client, int groupCallId = default, MessageSender participantAlias = default, GroupCallPayload payload = default, int source = default, bool isMuted = default, string inviteHash = default)
        {
            return client.ExecuteAsync(new JoinGroupCall
            {
                GroupCallId = groupCallId, ParticipantAlias = participantAlias, Payload = payload, Source = source, IsMuted = isMuted, InviteHash = inviteHash
            });
        }
    }
}
